// Generated by CoffeeScript 1.7.0
(function() {
  var New, W, base_tpl_name, base_tpl_url, fs, global_config, nodefn, npm, path, sprout, _;

  path = require('path');

  fs = require('fs');

  W = require('when');

  nodefn = require('when/node');

  sprout = require('sprout');

  global_config = require('../global_config');

  _ = require('lodash');

  npm = require('npm');

  base_tpl_name = 'roots-base';

  base_tpl_url = 'https://github.com/roots-dev/base.git';


  /**
   * Creates a new roots project using a template. If a template is not provided,
   * the roots-base template is used. If the roots-base template has not been
   * installed, that is installed first. Once the template has been created, if it
   * contains a package.json file with dependencies, they are installed. To review
   * the promise chain:
   *
   * - check to see if roots-base is installed
   * - if not, install it, emitting 'template:base_added' when finished
   * - initialize the template with sprout
   * - when finished, emit 'template:created'
   * - check to see if deps are present
   * - if so install them, emit 'deps:installing' before and 'deps:finished' after
   * - at the end, emit 'done' or 'error events', and return a promise
   *
   * @param  {Roots} roots - roots instance
   * @param  {Object} opts - options object
   * @return {Promise} promise for completed new template
   */

  New = (function() {
    var install_deps;

    function New(Roots) {
      this.Roots = Roots;
    }

    New.prototype.exec = function(opts) {
      var d, pkg, _ref, _ref1, _ref2;
      if (opts == null) {
        opts = {};
      }
      __track('api', {
        name: 'new',
        template: opts.template
      });
      d = W.defer();
      if (!opts.path) {
        return W.reject(new Error('missing path'));
      }
      opts = {
        path: path.resolve(opts.path),
        name: (_ref = opts.template) != null ? _ref : global_config().get('default_template'),
        overrides: (_ref1 = opts.overrides) != null ? _ref1 : {},
        defaults: (_ref2 = opts.defaults) != null ? _ref2 : {
          name: path.basename(opts.path)
        }
      };
      pkg = path.join(opts.path, 'package.json');
      W.resolve(_.contains(sprout.list(), base_tpl_name)).then(function(res) {
        if (!res) {
          return sprout.add({
            name: base_tpl_name,
            uri: base_tpl_url
          }).tap(function() {
            return d.notify('base template added');
          });
        }
      }).then(function() {
        return sprout.init(opts);
      }).tap(function() {
        return d.notify('project created');
      }).then(function() {
        if (fs.existsSync(pkg)) {
          return install_deps(d, pkg);
        }
      }).done(((function(_this) {
        return function() {
          return d.resolve(new _this.Roots(opts.path));
        };
      })(this)), d.reject.bind(d));
      return d.promise;
    };


    /**
     * Uses npm to install a project's dependencies.
     *
     * @private
     * @return {Promise} a promise for installed deps
     */

    install_deps = function(d, pkg) {
      d.notify('dependencies installing');
      return nodefn.call(npm.load.bind(npm), require(pkg)).then(function() {
        return nodefn.call(npm.commands.install, path.dirname(pkg), []);
      }).then(function() {
        return d.notify('dependencies finished installing');
      });
    };

    return New;

  })();

  module.exports = New;

}).call(this);
