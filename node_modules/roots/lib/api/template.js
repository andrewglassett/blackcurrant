// Generated by CoffeeScript 1.7.0
(function() {
  var W, fs, global_config, nodefn, remove_roots_config, sprout, _;

  fs = require('fs');

  _ = require('lodash');

  W = require('when');

  nodefn = require('when/node');

  sprout = require('sprout');

  global_config = require('../global_config');


  /**
   * Adds a template to sprout. Delegates directly to sprout's API.
   *
   * @todo  prepend templates with 'roots-''
   * @param {Object} args - can contain keys 'name', 'uri'
   * @return {Promise} a promise for the added template
   */

  exports.add = function(args) {
    __track('api', {
      name: 'template-add',
      template: args.name
    });
    return sprout.add(args);
  };


  /**
   * Removes a template from sprout. Delegates directly to sprout's API.
   *
   * @param {Object} args - must contain key 'name'
   * @return {Promise} promise for removed template
   */

  exports.remove = function(args) {
    __track('api', {
      name: 'template-remove',
      template: args.name
    });
    return sprout.remove(args);
  };


  /**
   * List all templates. Delegates directly to sprout's API.
   * @return {String} a string colored and formatted for the terminal
   */

  exports.list = function(args) {
    __track('api', {
      name: 'template-list'
    });
    return sprout.list(args);
  };


  /**
   * Set the default template used with roots new when one isn't supplied.
   *
   * @param  {Object} args - must contain key 'name'
   * @return {Promise} a promise that your template is the default
   */

  exports["default"] = function(args) {
    var config;
    if (args == null) {
      args = {};
    }
    __track('api', {
      name: 'template-default',
      template: args.name
    });
    if (!args.name) {
      return W.reject(new Error('please provide a template name'));
    }
    if (!_.contains(sprout.list(), args.name)) {
      return W.reject(new Error("you do not have this template installed"));
    }
    config = global_config();
    config.set('default_template', args.name);
    return W.resolve("default template set to " + args.name);
  };


  /**
   * Resets the global config file and removes all installed sprout templates.
   *
   * @param  {Boolean} override - do not confirm via stdin if true
   * @return {Promise} a promise for reset templates
   *
   * istanbul ignore next
   */

  exports.reset = function(override) {
    var deferred;
    __track('api', {
      name: 'template-reset'
    });
    deferred = W.defer();
    if (override) {
      remove_roots_config(deferred);
    } else {
      process.stdout.write('are you sure? (y/n) '.yellow);
      process.stdin.resume();
      process.stdin.setEncoding('utf8');
      process.stdin.on('data', function(txt) {
        process.stdin.pause();
        txt = txt.trim();
        if (txt === 'y' || txt === 'Y') {
          return remove_roots_config(deferred);
        }
        return deferred.reject('reset cancelled');
      });
    }
    return deferred.promise;
  };


  /**
   * Removes all other templates and global config.
   *
   * @private
   * @param  {Object} deferred - deferred object
   * @return {Promise} promise for finished task
   *
   * istanbul ignore next
   */

  remove_roots_config = function(deferred) {
    return nodefn.call(fs.unlink, global_config().path);
  };

}).call(this);
