// Generated by CoffeeScript 1.7.0
(function() {
  var Watcher, chokidar, minimatch, _;

  chokidar = require('chokidar');

  minimatch = require('minimatch');

  _ = require('lodash');


  /**
   * @class Watcher
   * @classdesc Watched a project, recompiles on change
   */

  Watcher = (function() {
    var ignore;

    function Watcher(roots) {
      this.roots = roots;
      this.watcher = chokidar.watch(this.roots.root, {
        ignoreInitial: true,
        ignored: ignore.bind(this)
      });
    }


    /**
     * Compile the project, once done, watch it for further changes.
     *
     * @return {Promise} promise that the project has compiled and is watched
     */

    Watcher.prototype.exec = function() {
      __track('api', {
        name: 'watch'
      });
      return this.roots.compile(true)["finally"]((function(_this) {
        return function() {
          return _this.watcher.on('error', function(err) {
            return _this.roots.emit('error', err);
          }).on('change', _this.roots.compile.bind(_this.roots));
        };
      })(this))["yield"](this.watcher);
    };


    /**
     * Given a path, returns true or false depending on whether it should be
     * ignored or not.
     *
     * @private
     *
     * @param  {String} p - absolute file path
     * @return {Boolean} whether the file should be ignored or not
     */

    ignore = function(p) {
      var f;
      f = p.replace(this.roots.root, '').slice(1);
      return this.roots.config.watcher_ignores.map(function(i) {
        return minimatch(f, i, {
          dot: true
        });
      }).filter(function(i) {
        return i;
      }).length;
    };

    return Watcher;

  })();

  module.exports = Watcher;

}).call(this);
