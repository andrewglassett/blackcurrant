// Generated by CoffeeScript 1.7.0
(function() {
  var Add, Base, W, dns, exec, fs, nodefn, path, rimraf, url, which,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  which = require('which');

  W = require('when');

  nodefn = require('when/node/function');

  exec = require('child_process').exec;

  Base = require('../base');

  fs = require('fs');

  path = require('path');

  rimraf = require('rimraf');

  url = require('url');

  dns = require('dns');

  Add = (function(_super) {
    var check_internet_connection, checkout_branch, configure_options, determine_if_local, ensure_local_template_exists, link_project, remove_existing_template, set_branch;

    __extends(Add, _super);

    function Add() {
      Add.__super__.constructor.apply(this, arguments);
    }

    Add.prototype.execute = function(opts) {
      var foo;
      foo = 'wow';
      return configure_options.call(this, opts)["with"](this).then(determine_if_local).then(ensure_local_template_exists).then(check_internet_connection).then(set_branch).then(remove_existing_template).then(link_project).then(checkout_branch)["yield"]("template '" + this.name + "' added");
    };


    /**
     * @private
     */

    configure_options = function(opts) {
      if (!opts || !opts.name) {
        return W.reject('your template needs a name!');
      }
      this.name = opts.name;
      this.template = opts.uri;
      this.local = false;
      if (this.name && !this.template) {
        this.template = this.name;
        this.name = this.template.split('/')[this.template.split('/').length - 1];
      }
      return W.resolve();
    };


    /**
     * If the template isn't an http or git url, set `@local` to true
     */

    determine_if_local = function() {
      var remote;
      url = url.parse(this.template);
      remote = url.pathname.split('.')[url.pathname.split('.').length - 1] === 'git';
      if (!remote) {
        this.local = true;
      }
      return W.resolve();
    };


    /**
     * If a local template was passed, we need to make sure it exists
     */

    ensure_local_template_exists = function() {
      if (!this.local) {
        return W.resolve();
      }
      if (!which.sync('git')) {
        return W.reject('you need to have git installed');
      }
      if (!fs.existsSync(path.normalize(this.template))) {
        return W.reject("there is no sprout template located at '" + this.template + "'");
      }
    };


    /**
     * The most legitimate way to find out if someone is connected to the
     * internetz, backed by a 5 year money-back guarantee!
     */

    check_internet_connection = function() {
      var e;
      if (this.local) {
        return W.resolve();
      }
      try {
        return nodefn.call(dns.resolve, 'google.com')["catch"](function() {
          throw new Error('make that you are connected to the internet!');
        });
      } catch (_error) {
        e = _error;
        console.log('caught');
        return console.log(e);
      }
    };


    /**
     * If a branch was passed via hash (github.com/foo/bar#some-branch), extract
     * it and save to a local variable, then remove it from the template uri
     */

    set_branch = function() {
      var branch_matcher;
      if (this.local) {
        return W.resolve();
      }
      this.branch = null;
      branch_matcher = /#(.*)$/;
      if (this.template.match(branch_matcher)) {
        this.branch = "" + (this.template.match(branch_matcher)[1]);
        this.template = this.template.replace(branch_matcher, '');
      }
      return W.resolve();
    };


    /**
     * If there was a template already there, get rid of it because we're about
     * to update it with a new version.
     */

    remove_existing_template = function() {
      if (!this.no_internet) {
        return nodefn.call(rimraf, this.path(this.name));
      }
    };


    /**
     * Link up the template to the right spot, whether this is locally or through
     * a git clone.
     */

    link_project = function() {
      var cmd;
      cmd = "git clone " + this.template + " " + (this.path(this.name));
      if (this.local) {
        cmd = "rm -rf " + (this.path(this.name)) + " && ln -s " + this.template + " " + (this.path(this.name));
      }
      if (!this.no_internet) {
        return nodefn.call(exec, cmd);
      }
    };


    /**
     * If there was a branch provided, check it out.
     */

    checkout_branch = function() {
      if (!this.branch) {
        return W.resolve();
      }
      return nodefn.call(exec, "git checkout " + this.branch, {
        cwd: this.path(this.name)
      });
    };

    return Add;

  })(Base);

  module.exports = function(opts) {
    return (new Add()).execute(opts);
  };

}).call(this);
